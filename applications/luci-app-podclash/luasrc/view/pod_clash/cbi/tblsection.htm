
<style type="text/css">
	#dialog_reslove {
		position: fixed;
		top: 0;
		left: 0;
		bottom: 0;
		right: 0;
		background: rgba(0, 0, 0, 0.7);
		display: none;
		z-index: 20000;
	}

	#dialog_reslove .dialog_box {
		position: relative;
		background: rgba(255, 255, 255);
		top: 10%;
		width: 70%;
		height: 90%;
		margin: auto;
		display: flex;
		flex-wrap: wrap;
		height:auto;
		align-items: center;
	}

	#dialog_reslove .dialog_line {
		margin-top: .5em;
		margin-bottom: .5em;
		margin-left: 2em;
		margin-right: 2em;
	}

	#dialog_reslove .dialog_box>h4,
	#dialog_reslove .dialog_box>p,
	#dialog_reslove .dialog_box>div {
		flex-basis: 100%;
	}

	#dialog_reslove .dialog_box>img {
		margin-right: 1em;
		flex-basis: 32px;
	}

	body.dialog-reslove-active {
		overflow: hidden;
		height: 100vh;
	}

	body.dialog-reslove-active #dialog_reslove {
		display: block;
	}
</style>

<%-
local rowcnt = 0

function rowstyle()
	rowcnt = rowcnt + 1
	if rowcnt % 2 == 0 then
		return " cbi-rowstyle-1"
	else
		return " cbi-rowstyle-2"
	end
end

function width(o)
	if o.width then
		if type(o.width) == 'number' then
			return ' style="width:%dpx"' % o.width
		end
		return ' style="width:%s"' % o.width
	end
	return ''
end

local has_titles = false
local has_descriptions = false

local anonclass = (not self.anonymous or self.sectiontitle) and "named" or "anonymous"
local titlename = ifattr(not self.anonymous or self.sectiontitle, "data-title", translate("Name"))

local i, k
for i, k in pairs(self.children) do
	if not k.typename then
		k.typename = k.template and k.template:gsub("^.+/", "") or ""
	end

	if not has_titles and k.title and #k.title > 0 then
		has_titles = true
	end

	if not has_descriptions and k.description and #k.description > 0 then
		has_descriptions = true
	end
end

function render_titles()
	if not has_titles then
		return
	end

	%><tr class="tr cbi-section-table-titles <%=anonclass%>"<%=titlename%>><%

	local i, k
	for i, k in ipairs(self.children) do
		if not k.optional then
			%><th class="th cbi-section-table-cell"<%=
				width(k) .. attr('data-widget', k.typename) %>><%

			if k.titleref then
				%><a title="<%=self.titledesc or translate('Go to relevant configuration page')%>" class="cbi-title-ref" href="<%=k.titleref%>"><%
			end

			write(k.title)

			if k.titleref then
				%></a><%
			end

			%></th><%
		end
	end

	if self.sortable or self.extedit or self.addremove then
		%><th class="th cbi-section-table-cell cbi-section-actions"></th><%
	end

	%></tr><%

	rowcnt = rowcnt + 1
end

function render_descriptions()
	if not has_descriptions then
		return
	end

	%><tr class="tr cbi-section-table-descr <%=anonclass%>"><%

	local i, k
	for i, k in ipairs(self.children) do
		if not k.optional then
			%><th class="th cbi-section-table-cell"<%=
				width(k) .. attr("data-widget", k.typename) %>><%

			write(k.description)

			%></th><%
		end
	end

	if self.sortable or self.extedit or self.addremove then
		%><th class="th cbi-section-table-cell cbi-section-actions"></th><%
	end

	%></tr><%

	rowcnt = rowcnt + 1
end

-%>

<!-- tblsection -->
<div class="cbi-section cbi-tblsection" id="cbi-<%=self.config%>-<%=self.sectiontype%>">
	<% if self.title and #self.title > 0 then -%>
		<h3><%=self.title%></h3>
	<%- end %>
	<%- if self.sortable then -%>
		<input type="hidden" id="cbi.sts.<%=self.config%>.<%=self.sectiontype%>" name="cbi.sts.<%=self.config%>.<%=self.sectiontype%>" value="" />
	<%- end -%>
	<div class="cbi-section-descr"><%=self.description%></div>
	<table class="table cbi-section-table">
		<%-
			render_titles()
			render_descriptions()

			local isempty, section, i, k = true, nil, nil
		    for i, k in ipairs(self:cfgsections()) do
				isempty = false
				section = k

				local sectionname = striptags((type(self.sectiontitle) == "function") and self:sectiontitle(section) or k)
				local sectiontitle = ifattr(sectionname and (not self.anonymous or self.sectiontitle), "data-title", sectionname, true)
				local colorclass = (self.extedit or self.rowcolors) and rowstyle() or ""
				local scope = {
					valueheader = "cbi/cell_valueheader",
					valuefooter = "cbi/cell_valuefooter"
				}
		-%>
		<tr class="tr cbi-section-table-row<%=colorclass%>" id="cbi-<%=self.config%>-<%=section%>"<%=sectiontitle%>>
			<%-
				local node
				for k, node in ipairs(self.children) do
					if not node.optional then
						node:render(section, scope or {})
					end
				end
			-%>

			<%- if self.sortable or self.extedit or self.addremove then -%>
				<td class="td cbi-section-table-cell nowrap cbi-section-actions">
					<div>
						<%- if self.sortable then -%>
							<input class="btn cbi-button cbi-button-up" type="button" value="<%:Up%>" onclick="return cbi_row_swap(this, true, 'cbi.sts.<%=self.config%>.<%=self.sectiontype%>')" title="<%:Move up%>" />
							<input class="btn cbi-button cbi-button-down" type="button" value="<%:Down%>" onclick="return cbi_row_swap(this, false, 'cbi.sts.<%=self.config%>.<%=self.sectiontype%>')" title="<%:Move down%>" />
						<% end; if self.extedit then -%>
							<input class="btn cbi-button cbi-button-edit" type="button" value="<%:Edit%>"
							<%- if type(self.extedit) == "string" then
							%> onclick="location.href='<%=self.extedit:format(section)%>'"
							<%- elseif type(self.extedit) == "function" then
							%> onclick="location.href='<%=self:extedit(section)%>'"
							<%- end
							%> alt="<%:Edit%>" title="<%:Edit%>" />
						<% end; if self.addremove then %>
							<input class="btn cbi-button cbi-button-remove" type="submit" value="<%:Delete%>"  onclick="this.form.cbi_state='del-section'; return true" name="cbi.rts.<%=self.config%>.<%=k%>" alt="<%:Delete%>" title="<%:Delete%>" />
						<%- end -%>
					</div>
				</td>
			<%- end -%>
		</tr>
		<%- end -%>

		<%- if isempty then -%>
		<tr class="tr cbi-section-table-row placeholder">
			<td class="td"><em><%:This section contains no values yet%></em></td>
		</tr>
		<%- end -%>
	</table>

	<% if self.error then %>
		<div class="cbi-section-error">
			<ul><% for _, c in pairs(self.error) do for _, e in ipairs(c) do -%>
				<li><%=pcdata(e):gsub("\n","<br />")%></li>
			<%- end end %></ul>
		</div>
	<% end %>

	<%- if self.addremove then -%>
		<div class="cbi-section-create cbi-tblsection-create">
			
			<%- if not self.sp_addremove then -%>
        <input class="cbi-button cbi-button-add" type="submit" value="<%:Add%>" name="cbi.cts.<%=self.config%>.<%=self.sectiontype%>.<%=section%>" title="<%:Add%>" />
			<%- else -%>
				<input class="cbi-button cbi-button-add" type="submit" value="<%:Add at top%>" name="cbi.tcts.<%=self.config%>.<%=self.sectiontype%>.<%=section%>" title="<%:Add at top%>" />
        <input class="cbi-button cbi-button-add" type="submit" value="<%:Add at bottom%>" name="cbi.cts.<%=self.config%>.<%=self.sectiontype%>.<%=section%>" title="<%:Add at bottom%>" />
				<%- end -%>
				<input class="cbi-button cbi-button-add" type="button" value="<%:Resolve config.yaml%>" name="cbi.its.<%=self.config%>.<%=self.sectiontype%>.<%=section%>" id="cbi.its.<%=self.config%>.<%=self.sectiontype%>.<%=section%>" title="<%:Resolve config.yaml%>" onclick='show_reslove_dialog("<%=self.sectiontype%>")'/>
				<!-- <input type="file" id="cbi.its.<%=self.config%>.<%=self.sectiontype%>.resolve_config" style="visibility:hidden; position: absolute;top: 0px; left: 0px;" accept=".yaml, .yml" /> -->

				<script type="text/javascript">
				function loadScript(url, callback){
						var script = document.createElement ("script")
						script.type = "text/javascript";
						if (script.readyState){ //IE
								script.onreadystatechange = function(){
										if (script.readyState == "loaded" || script.readyState == "complete"){
												script.onreadystatechange = null;
												callback();
										}
								};
						} else { //Others
								script.onload = function(){
										callback();
								};
						}
						script.src = url;
						document.getElementsByTagName("head")[0].appendChild(script);
				}
					function close_reslove_dialog() {
						document.body.classList.remove('dialog-reslove-active')
						document.getElementById('dialog_reslove').remove()
					}

					function resloveYaml(part) {
						let s = document.getElementById('diglog_status')
						if (!s)	return
						let configYaml = document.getElementById("dialog_reslove_text").value;
						if (configYaml == null || configYaml == "") {	return }
						loadScript("<%=resource%>/pod_clash/yaml.min.js", ()=>{
							try {
							const doc = YAML.parse(configYaml);
								let conf
								if ("proxy" ==  part){
									conf = "proxies"
									doc[conf] = Object.assign(doc[conf], doc["proxy-providers"])
								} else if ("proxy_group" == part) {
									conf = "proxy-groups"
								} else if ("rule" == part) {
									conf = "rules"
								} else if ("rule_provider" == part) {
									conf = "rule-providers"
								}
								if (! doc[conf]){
									console.log("No " + part + " found")
									alert("No " + part + " found")
									return
								}
								let formData = new FormData()
								formData.append('part', part)
								formData.append('config_json', JSON.stringify(doc[conf]))
								let xhr = new XMLHttpRequest()
								xhr.open("POST", "<%=luci.dispatcher.build_url('admin/services/pod_clash/resolve_config')%>", true)
								xhr.onload = function() {
									if (xhr.status == 200){
										alert("Import success!")
										window.location.replace(location.href)
									}
									else{
										alert("Import fail!")
									}
								}
								xhr.send(formData)
							} catch (e) {
								console.log(e);
							}
						})
					}

					function clear_text(){
						let s = document.getElementById('diglog_status')
						s.innerHTML = ""
					}

					function show_reslove_dialog(part) {
						document.getElementById('dialog_reslove') && document.getElementById('dialog_reslove').remove() || document.body.insertAdjacentHTML("beforeend", '<div id="dialog_reslove"><div class="dialog_box"><div class="dialog_line"></div><div class="dialog_line"><span><%:Please paste the config.yaml:%></span><br><span id="diglog_status"></span></div><div class="dialog_line"><textarea class="cbi-input-textarea" id="dialog_reslove_text" style="width: 100%; height:100%;" rows="20" onkeyup="clear_text()"></textarea></div><div class="dialog_line" style="text-align: right;"><input type="button" class="btn cbi-button cbi-button-apply" type="submit" value="<%:Submit%>" onclick="resloveYaml(\''+part+'\')" /> <input type="button" class="btn cbi-button cbi-button-reset" type="reset" value="<%:Cancel%>" onclick="close_reslove_dialog()" /></div><div class="dialog_line"></div></div></div>')
						document.body.classList.add('dialog-reslove-active')
						const s = document.getElementById('diglog_status')
						s.innerHTML = ""
						const x = document.getElementById('dialog_reslove_text')
						if(part == "proxy"){
							x.placeholder = "proxys:\n  ...\nproxy-providers:\n  ..."
						}else if(part == "proxy_group"){
							x.placeholder = 'proxy-groups:\n  ...'

						}else if(part == "rule_provider"){
							x.placeholder = 'rule-providers:\n  ...'
						}else if(part == "rule"){
							x.placeholder = 'rules:\n  ...'
						}
					}
          // btnReslove = document.getElementById("cbi.its.<%=self.config%>.<%=self.sectiontype%>.<%=section%>")
          // fileReslove = document.getElementById("cbi.its.<%=self.config%>.<%=self.sectiontype%>.resolve_config")
          // btnReslove.onclick = function (e) {
          //   fileReslove.click()
          //   e.preventDefault()
          // }

          // fileReslove.onchange = function(e){
          //   if (!fileLoad.value) {
          //     return
          //   }
          //   let formData = new FormData()
          //   formData.append('upload-filename', fileReslove.files[0].name)
          //   formData.append('upload-archive', fileReslove.files[0])
          //   let xhr = new XMLHttpRequest()
          //   let xhrParameter = "<%=self.sectiontype%>"
					// 	xhr.open("POST", "<%=luci.dispatcher.build_url('admin/services/pod_clash/resolve_config')%>", true)
          //   xhr.onload = function() {
          //     if (xhr.status == 200)
          //     location.reload()
          //     else
          //     alert("Import fail!")
          //   }
          //   xhr.send(formData)
          // }
        </script>
        <%- if self.has_provider then -%>
          <input class="cbi-button cbi-button-add" type="button" value="<%:Upload providers%>" id="cbi.upts.<%=self.config%>.<%=self.sectiontype%>.<%=section%>" name="cbi.upts.<%=self.config%>.<%=self.sectiontype%>.<%=section%>" title="<%:Upload providers%>" />
          <input type="file" id="cbi.upts.<%=self.config%>.<%=self.sectiontype%>.providers_import" style="visibility:hidden; position: absolute;top: 0px; left: 0px;" accept=".yaml, .yml" multiple="multiple"  />
          
          <script type="text/javascript">
            let btnLoad = document.getElementById("cbi.upts.<%=self.config%>.<%=self.sectiontype%>.<%=section%>")
            let fileLoad = document.getElementById("cbi.upts.<%=self.config%>.<%=self.sectiontype%>.providers_import")
            btnLoad.onclick = function (e) {
              fileLoad.click()
              e.preventDefault()
            }

						async function file2Tar(fileToLoad) {
							if (fileToLoad == null) return
							function file2Byte(file) {
								return new Promise((resolve, reject) => {
									var fileReader = new FileReader();
									fileReader.onerror = () => {
										fileReader.abort();
										reject(new DOMException("Problem parsing input file."));
									};
									fileReader.onload = (fileLoadedEvent) =>
									{
										resolve(ByteHelper.stringUTF8ToBytes(fileLoadedEvent.target.result));
									}
									fileReader.readAsBinaryString(file);
							})}
							const x = await file2Byte(fileToLoad)
							return fileByte2Tar(null, fileToLoad.name, x).downloadAs( fileToLoad.name + ".tar" )
						}

						function fileByte2Tar(tarFile, fileName, fileBytes) {
							if(!tarFile) tarFile = TarFile.create(fileName)

							var tarHeader = TarFileEntryHeader.default();
							var tarFileEntryHeader = new TarFileEntryHeader
							(
								fileName,
								tarHeader.fileMode,
								tarHeader.userIDOfOwner,
								tarHeader.userIDOfGroup,
								fileBytes.length, // fileSizeInBytes,
								tarHeader.timeModifiedInUnixFormat, // todo
								0, // checksum,
								TarFileTypeFlag.Instances().Normal,
								tarHeader.nameOfLinkedFile,
								tarHeader.uStarIndicator,
								tarHeader.uStarVersion,
								tarHeader.userNameOfOwner,
								tarHeader.groupNameOfOwner,
								tarHeader.deviceNumberMajor,
								tarHeader.deviceNumberMinor,
								tarHeader.filenamePrefix
							);

							tarFileEntryHeader.checksumCalculate();
							var entryForFileToAdd = new TarFileEntry
							(
								tarFileEntryHeader,
								fileBytes
							);

							tarFile.entries.push(entryForFileToAdd);
							return tarFile
						}

            fileLoad.onchange =  function(e){
              if (!fileLoad.value) {
                return
              }
							loadScript("<%=resource%>/pod_clash/tar.min.js", ()=>{
								let uploadPromises = new Array()
								for (let i = 0; i < fileLoad.files.length; i++){
									uploadPromises.push(new Promise(async (resolve, reject) => {
										var bytesToWriteAsBlob = await file2Tar(fileLoad.files[i])
										let formData = new FormData()
										formData.append('upload-filename', fileLoad.files[i].name)
										formData.append('upload-archive', bytesToWriteAsBlob)
										let xhr = new XMLHttpRequest()
										let xhrUrl = "<%=self.sectiontype%>"
										if (xhrUrl == "rule_provider"){
											xhr.open("POST", "<%=luci.dispatcher.build_url('admin/services/pod_clash/import_rule_provider')%>", true)
										}
										else if (xhrUrl == "proxy"){
											xhr.open("POST", "<%=luci.dispatcher.build_url('admin/services/pod_clash/import_proxy_provider')%>", true)
										}
										xhr.onload = function() {
											if (xhr.status == 200)
												return resolve()
											else
												return reject()
										}
										xhr.send(formData)
									}))
								}
								Promise.all(uploadPromises)
									.then(() => {
										window.location.replace(location.href)
									})
									.catch(() => {
										alert("Import fail!")
									})
							})
            }
          </script>
        <%- end -%>
        <input class="cbi-button cbi-button-remove " type="submit" value="<%:Delete All%>" name="cbi.rats.<%=self.config%>.<%=self.sectiontype%>.<%=section%>" title="<%:Delete All%>" />
    </div>
  <%- end -%>
</div>
<!-- /tblsection -->